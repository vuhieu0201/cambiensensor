import serial
import time
import numpy as np
import matplotlib.pyplot as plt

# ==== Cấu hình ====
PORT = 'COM17'  
BAUD = 9600
GROUND_TRUTH = 10.0  # khoảng cách thực tế (cm)

WINDOW_SIZE = 5  # Cửa sổ lọc trung bình

raw_values = []
filtered_values = []
timestamps = []

ser = serial.Serial(PORT, BAUD, timeout=1)
time.sleep(2)

print("📡 Đang thu dữ liệu đo...\n")

start_time = time.time()
while len(raw_values) < 100:
    line = ser.readline().decode(errors='ignore').strip()
    timestamp = time.time() - start_time
    if "Raw" in line:
        try:
            parts = line.split('|')
            raw = float(parts[0].split(':')[1].strip().replace("cm", ""))
            raw_values.append(raw)
            timestamps.append(timestamp)

            # Bộ lọc trung bình động
            if len(raw_values) >= WINDOW_SIZE:
                window = raw_values[-WINDOW_SIZE:]
                filtered = sum(window) / WINDOW_SIZE
            else:
                filtered = raw

            filtered_values.append(filtered)

            # Tính thời gian phản hồi
            if len(timestamps) >= 2:
                dt = (timestamps[-1] - timestamps[-2]) * 1000  # ms
                raw_response_time = dt
                # Độ trễ bộ lọc trung bình động ~ (WINDOW_SIZE-1)/2 mẫu
                filtered_response_time = dt * ((WINDOW_SIZE - 1) / 2)
                print(f"🟠 Raw: {raw:.2f} | 🔵 Filtered: {filtered:.2f} | Raw: {raw_response_time:.1f} ms | Filtered: ~{filtered_response_time:.1f} ms")
            
        except:
            continue
ser.close()
# ==== Phân tích dữ liệu ====
raw_np = np.array(raw_values)
filtered_np = np.array(filtered_values)
timestamps_np = np.array(timestamps)

# Sai số trung bình (%)
raw_error = np.abs(raw_np - GROUND_TRUTH) / GROUND_TRUTH * 100
filtered_error = np.abs(filtered_np - GROUND_TRUTH) / GROUND_TRUTH * 100

# Nhiễu (độ lệch chuẩn)
raw_std = np.std(raw_np)
filtered_std = np.std(filtered_np)
noise_reduction = (1 - filtered_std / raw_std) * 100 if raw_std != 0 else 0

# Thời gian trung bình giữa các mẫu
time_diffs = np.diff(timestamps_np)
avg_sample_interval = np.mean(time_diffs) * 1000  # ms

# Ước lượng độ trễ do lọc trung bình
estimated_filter_delay = ((WINDOW_SIZE - 1) / 2) * avg_sample_interval
avg_response_time_raw = avg_sample_interval
avg_response_time_filtered = estimated_filter_delay

# ==== Kết quả ====
print("\n=== PHÂN TÍCH ===")
print(f"Số mẫu thu được: {len(raw_values)}")
print(f"Sai số trung bình Raw (chưa lọc): {np.mean(raw_error):.2f}%")
print(f"Sai số trung bình Filtered (lọc trung bình): {np.mean(filtered_error):.2f}%")
print(f"Nhiễu Raw (std): {raw_std:.2f}")
print(f"Nhiễu Filtered (std): {filtered_std:.2f}")
print(f"Hiệu quả lọc (giảm nhiễu): {noise_reduction:.2f}%")
print(f"Thời gian đáp ứng trung bình (Raw): {avg_response_time_raw:.2f} ms")
print(f"Thời gian đáp ứng trung bình (Filtered ~ trễ hơn): {avg_response_time_filtered:.2f} ms")

# ==== Vẽ biểu đồ ====
plt.figure(figsize=(10, 5))
plt.plot(raw_np, label='Raw', linestyle='--', color='red')
plt.plot(filtered_np, label='Filtered (Moving Average)', color='blue')
plt.axhline(GROUND_TRUTH, color='green', linestyle=':', label='Ground Truth')
plt.xlabel('Chỉ số mẫu')
plt.ylabel('Khoảng cách (cm)')
plt.title('So sánh Dữ liệu Raw vs Filtered (Moving Average)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
